<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring 基础 快速构建项目</title>
    <link href="/2023/03/05/Spring%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/05/Spring%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-快速构建spring项目"><a href="#1-快速构建spring项目" class="headerlink" title="1. 快速构建spring项目"></a>1. 快速构建spring项目</h2><ol><li>idea选择maven项目，不勾选模板</li><li>导包</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring的核心组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringIoC(依赖注入)的基础实现 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring提供在基础IoC功能上的扩展服务，此外还提供许多企业级服务的支持，如邮件服务、任务调度、JNDI定位、EJB集成、远程访问、缓存以及各种视图层框架的封装等 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>resource 新建一个spring.xml （spring.xml是用来配bean对象的文件，使用过程为在代码里获取容器（spring.xml）如果不想把某些bean写在一个目录里面，那就可以建立一个新的.xml（spring 类型的）分开写。</p></li><li><p>在spring.xml 文件中创建bean</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;dao.BookDao&quot;</span>&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure></li><li><p>在service层中，当要创建对象时，我们就先获取spring容器（spring.xml），从spring容器中获取对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取spring容器</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring.xml&quot;</span>);<br><span class="hljs-comment">//        从容器里面获得创建的bean对象</span><br>        bookDao = (IBookDao)ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br><span class="hljs-comment">//        这里的getBean中填的是bookDao创建的bean的id（唯一指定）</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="2-bean的实例创建-IOC"><a href="#2-bean的实例创建-IOC" class="headerlink" title="2. bean的实例创建(IOC)"></a>2. bean的实例创建(IOC)</h2><ul><li><p>无参构造：pojo提供无参构造函数，spring.xml文件中创建的bean对象标签中不需要写内容</p></li><li><p>有参构造：pojo提供有参构造函数，spring.xml文件中，创建一个bean，在bean标签中通过constructor-arg标签设置构造函数参数的值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Stu01&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.Student&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;student01&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李四&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>饿汉式单例模式 — 构造函数私有化 此时无法通过构造函数创建类，我们需要通过静态工厂方法得到对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ObjTest</span> <span class="hljs-variable">objTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjTest</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ObjTest</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;得到对象了！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ObjTest <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> objTest;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;objTest&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.ObjTest&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getInstance&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>factory-method 表示告知容器如何得到对象 <br></code></pre></td></tr></table></figure></li><li><h4 id="DI注入"><a href="#DI注入" class="headerlink" title="DI注入"></a>DI注入</h4><ul><li><p>注入方式1：根据构造函数注入对象 1. 通过构造函数的顺序注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testA&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.TestA&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testB&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.TestB&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testC&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.TestC&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;testA&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;testB&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>ref 属性表示引用上面的bean对象对应的id<br></code></pre></td></tr></table></figure></li><li><p>根据构造函数的参数类型初始化，但是类型不能重复，否则会产生歧义 基本类型就使用type属性标识</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testA&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.TestA&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xiaoming&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>或者根据精确的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testA&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.TestA&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xiaoming&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>或则根据name来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testA&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.TestA&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xiaoming&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>或者根据setter方法注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testD&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.TestD&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testA&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;testA&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testB&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;testB&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>自动装配</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">    <br>    <br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-bean对象的作用范围"><a href="#3-bean对象的作用范围" class="headerlink" title="3. bean对象的作用范围"></a>3. bean对象的作用范围</h2><p>spring IOC 管理默认为单例模式，通过实例化两个对象，打印地址，发现地址相同。IOC可以使用scope属性来设置到底是单例模式还是普通模式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testD&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pojo.TestD&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testA&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;testA&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testB&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;testB&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-基于注解的容器配置"><a href="#4-基于注解的容器配置" class="headerlink" title="4. 基于注解的容器配置"></a>4. 基于注解的容器配置</h2><p>1。修改命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2 注解@Autowired – 原理是byType 进行注入，如果有两个相同的类型，那么就会出现问题</p><p>@Autowired 放在构造函数上，就会默认使用该构造函数。@Autowired 放在属性上时，若出现两个一样的类型，可以结合标签 @Qualifier(“ 【name或者id】  “) 指定具体的对象</p><p>3 @Resource(name &#x3D; “Bean01” type&#x3D;BeanA,class)</p><p>Resouces 是byName的方法，根据（） 里面的东西，在容器（spring.xml 文件）中寻找 name &#x3D; “Bean01”， type是BeanA的bean对象 </p><h2 id="5-代理模式"><a href="#5-代理模式" class="headerlink" title="5. 代理模式"></a>5. 代理模式</h2><p>给某一个类提供代理类，在代理类中实现对类的方法的访问。 &lt;抽象类&gt;  &lt;真实类&gt;(业务类)  &lt;代理类&gt;(类比火车票代售点)</p><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>先写一个接口，真实类和代理类都要实现A方法，代理类中创建真实类，代理类的A方法调用真实类的A方法，进一步扩展可以在代理方法前后增加一些功能</p><p>学生学习 —&gt; 代理类 —&gt; </p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>利用反射加载类的信息</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>切面–所有的模块，程序在执行前都要执行某个方法。就像在很多模块之间横切一刀</p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/02/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/02/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式（Regex）"><a href="#正则表达式（Regex）" class="headerlink" title="正则表达式（Regex）"></a>正则表达式（Regex）</h1><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><ol><li><code>?</code>  — 限定符表示前面这个字符应该出现 0 次或者 1 次  d?  <strong>d可有可无</strong></li><li><code>*</code> — 通配符表示前面这个字符应该出现 0 次或者多次 d*  <strong>若干个d</strong></li><li><code>+</code> — 表示前面这个字符至少应该出现1次以上  例: d+  <strong>1个以上的d</strong> </li><li><code>&#123;&#125;</code> — 表示前面的字符应该出现花括号里规定的次数，也可以这样用： {3} 三次; {3，6} 三到六次; {3，} 三次以上。</li><li><code>()</code> — 用于分组 表示括号里面的内容看作一个整体</li><li><code>[]</code> —表示一个字符，该字符为【】里指定的内容 例: [abc] a、b、c 任一字符，[a]</li><li><code>|</code> — 表示或运算 满足左右任一都能匹配，和普通的或运算一样</li><li><code>^</code> — 脱字符表示 脱字符后面的规则匹配的字符除外，其他字符都匹配 例如[^a-z] 除了小写字符外都匹配（不匹配小写字符，与编程的！类似）</li></ol><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><p>正则表达式中已经为我们准备好了一些字符合集（元字符）</p><ol><li><code>\d</code> — 表示数字字符，数字 0-9 相当于 [0-9]</li><li><code>\w</code> — 表示单词字符，所有的英文字符、数字、下划线</li><li><code>\s</code>— 表示空白字符，包括空格和制表符（tab）以及换行符</li><li><code>\b</code> — 表示匹配的字符的边界，可以为开头也可以为结尾</li></ol><p>以上小写的表示该类集合，大写则表示非该类字符</p><ol><li><code>\D</code> — 表示非数字字符</li><li><code>\W</code> — 表示非单词字符</li><li><code>\S</code> — 表示非空白字符</li></ol><p>还有一些特殊字符</p><ol><li><code>.</code> — 表示任意字符，但不包括换行符</li><li><code>^</code> — 如果不和其他的规则写在一起，就表示匹配行首的字符</li><li><code>$</code> — 表示匹配行尾的字符</li></ol><hr><h4 id="贪婪匹配和懒惰匹配"><a href="#贪婪匹配和懒惰匹配" class="headerlink" title="贪婪匹配和懒惰匹配"></a>贪婪匹配和懒惰匹配</h4><p>正则表达式默认匹配尽可能多的字符，例如我们想找到代码片段中的标签 <code>&lt;&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>正则表达式<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们采用 <code>&lt;.+&gt;</code>规则，但是会将所有的字符匹配，因为这里采用了贪婪匹配，<code>.</code>可能匹配为右边的<code>&gt; </code> 这样就会选中第一个<code>&lt;</code> 和最后一个<code>&gt;</code> 的所有内容，显然不合理，我们在规则中加一个<code>?</code>就能将默认的贪婪匹配改成懒惰匹配</p><img src="/2023/02/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20230226125403553.png" class="" title="贪婪匹配"><img src="/2023/02/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20230226125433870.png" class="" title="懒惰匹配"><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><p>匹配手机号：</p><p><code>？？？</code></p><p>匹配自带答案的word文档试卷</p><p><code>\(*\)</code></p>]]></content>
    
    
    <categories>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>53-最大子数组和</title>
    <link href="/2023/02/20/53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <url>/2023/02/20/53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>子数组 是数组中的一个连续部分。</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><ol><li>找最大子数组的和，考虑动态规划。</li><li>包含nums[i] 的最大子数组的和 –&gt; 会有 “有后效性”。 即不确定性（不知道nums[i]到底是在结尾还是开头还是中间）。因此，把nums[i]放在最后，以nums[i] 结尾的子数组的最大和记作 dp[i]。</li><li>dp[i] 的取值为： 当dp[i-1]&lt;&#x3D;0 时，dp[i] &#x3D; nums[i] （一个小于或者等于0的数无论加什么都会小于那个被加的数）；当dp[i-1]&gt;0 时，我们可以得到 dp[i] &#x3D; nums[i] + dp[i-1]  （一个大于0的数无论加什么都会大于那个被加的数）</li></ol><h4 id="代码组织步骤："><a href="#代码组织步骤：" class="headerlink" title="代码组织步骤："></a>代码组织步骤：</h4><ol><li>创建一个数组 dp[i]</li><li>初始话dp[0] &#x3D; nums[0];</li><li>设置循环变量 i &#x3D; 1。</li><li>开始循环 条件：if(dp[i-1]&gt;0 ) dp[i] &#x3D;  nums[i] + dp[i-1]  否则  dp[i] &#x3D;  nums[i];  (状态转移方程 01)</li></ol><p>如果跳出以 nums[i]结尾的子数组，前i个数组中子数组的最大值为 dp[i] 。这样状态转移方程 02 可以写为： dp[i] &#x3D; max{ nums[i] , nums[i] + dp[i-1] }</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p><a href = "https://leetcode.cn/problems/maximum-subarray/solutions/9058/dong-tai-gui-hua-fen-zhi-fa-python-dai-ma-java-dai/" >参考题解：53-最大子数组和(动态规划 + 分治法)</a></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>217. 存在重复元素</title>
    <link href="/2023/02/19/217-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <url>/2023/02/19/217-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p>给你一个整数数组 <code>nums</code> 。如果任一值在数组中出现 <strong>至少两次</strong> ，返回 <code>true</code> ；如果数组中每个元素互不相同，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">输入：nums = [1,2,3,1]<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">输入：nums = [1,2,3,4]<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">输入：nums = [1,1,1,3,3,4,3,2,4,2]<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        HashSet&lt;Integer&gt; hashSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span> &lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt; nums.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(!hashSet.add(nums[i]))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//向hashset中插入Integer 如果存在相同的元素则 hashSet.add()插入失败返回false，反之返回true</span><br></code></pre></td></tr></table></figure><h4 id="拾遗："><a href="#拾遗：" class="headerlink" title="拾遗："></a>拾遗：</h4><blockquote><p>HashSet是基于HashMap来实现的，实现了Set接口，同时还实现了序列化和可克隆化。而集合（Set）是不允许重复值的。所以HashSet是一个没有重复元素的集合，但不保证集合的迭代顺序，所以随着时间元素的顺序可能会改变。HashSet是基于HashMap来实现的，所以允许空值，不是线程安全。HashSet是基于HashMap实现的，区别就在于在HashMap中输入一个键值对，而在HashSet中只输入一个值。<a href = "http://t.csdn.cn/4NRoD">参考文章:Java中哈希集(HashSet）概念，实现以及操作</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>HashSet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统复习要点汇总</title>
    <link href="/2023/02/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <url>/2023/02/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>—作业总结—<br>      进程的三种基本状态<br>就绪  运行  阻塞<br>就绪到运行： 进程调度把处理机分配给进程<br>运行到阻塞： 进程对待某事发生变成阻塞<br>阻塞到就绪： 进程等待事件发生<br>运行到就绪： 时间片用完</p><img src="/2023/02/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9%E6%B1%87%E6%80%BB/image-20230218231341550.png" class="" title="image-20230218231341550"><p>进程 、 线程的区别<br>调度方面：<br>进程是资源分配和调度的基本单位<br>引入线程后 线程是调度的基本单位<br>并发方面：<br>引入线程后，进程之间能并发执行 ，同一个进程之间也能并发执行<br>资源占有方面：<br>线程能直接访问父进程分配的资源，自己不拥有系统资源</p><p>进程和程序的区别<br>进程 &#x3D; 程序 + 数据 + PCB<br>进程是程序的依次动态执行过程 具有动态概念，程序则是一个静态概念<br>程序是指令的有序集合，无执行含义，进程则是强调执行过程<br>进程具有并行特性，程序则没有<br>不同的进程可以包含同一程序，同一个程序也能产生多个进程</p><p>—进程的调度<br>调度的概念： 有许多进程都想使用CPU，都是CPU只有一个，资源有限，因此，给谁用，用多久，我们要提供一个规则！</p><p>调度的三个层次：(补全笔记！！！) </p><ol><li><p>高级调度(作业调度)： 调度对象是作业，根据某种算法，将外存中处于后备队列的作业调入内存，为它们创建进程、分配必要的资源，并将它们放入就绪队列。</p></li><li><p>低级调度(进程调度&#x2F;处理机调度)： 调度对象是进程。根据某种算法，决定就绪队列中的哪个进程应获得处理机，并由分派程序将处理机分配给选中的进程。</p></li><li><p>中级调度：内存不够时，操作系统会将进程的某些数据调至外存，等内存空闲或者进程需要运行时再次调入内存，暂时被调出内存的进程状态称为挂起状态，其PCB会被组织成挂起队列。<br>中级调度（内存调度）即： 按照某种策略决定将哪个处于挂起状态的进程重新调入内存。</p></li></ol><p>&#x3D;&#x3D;&#x3D;任何一种操作系统都有低级调度&#x3D;&#x3D;&#x3D;<br>        &#x3D;&#x3D;&#x3D;高级调度方式存在于批处理系统中&#x3D;&#x3D;&#x3D;<br>        &#x3D;&#x3D;&#x3D;中级调度主要用于实现挂起操作，将进程调至外存&#x3D;&#x3D;&#x3D;</p><hr><p>周转时间： 作业提交给操作系统开始到作业完成为止。</p><p>它包含4个部分： 作业在外存后备队列上等待作业调度（高级调度）的时间、进程在就绪队列上等待进程调度（低级调度）、进程在CPU上执行的时间、进程等待I&#x2F;O操作完成的时间。</p><p>平均周转时间： 各作业的周转时间之和&#x2F;作业数<br>带权周转时间： 作业周转时间&#x2F;作业实际运行的时间<br>平均带权周转时间： 各作业的带权周转时间之和&#x2F;作业数</p><p>响应时间： 用户提交请求到首次产生响应所用的时间</p><p>作业调度算法：</p><ol><li><p>先来先服务 FCFS ： 优先： 公平，实现简单。缺点： 排在长作业后面的短作业需要等待很长时间，带权周转时间很大，对短作业来说用户体验不好。</p></li><li><p>短作业优先 SJF ： 哪个作业要求的服务时间最短就先服务谁。追求最短的平均等待时间，最少的平均周转时间，最少的平均带权周转时间。<br>有可能产生饥饿现象—长作业可能会长时间得不到满足。</p></li><li><p>高响应比优先 HRRN ：响应比 &#x3D;  (等待时间 + 要求服务时间) &#x2F;要求服务时间<br>优点： 综合了SJF 短作业优先(服务时间短的优先)，和FCFS先来先服务(等待时间越短越好) 的优点。因为等待的时间越久，其响应比也会越大，可以避免长作业饥饿的问题。</p></li></ol><p>进程之间的同步和互斥</p><p>进程同步机制的应遵循的规则</p><ol><li>空闲让进</li><li>忙则等待</li><li>有限等待</li><li>让权等待</li></ol><p>引入信号量机制 同步信号量：S &#x3D; 0  互斥信号量 mutex &#x3D; 1<br>进程之间同步的话意味着：进程一前一后的执行<br>进程之间互斥的话意味着：进程互相争夺临界区资源（不能同时访问）</p><p>P V 操作： P（） 申请资源 ；V（） 释放资源<br>同步： S &#x3D; 0；<br>进程1 和 进程2<br>process1（S）<br>    …….<br>    V(S)<br>    …….</p><p>process2 (S)<br>    …….<br>    P(S)<br>    …….</p><p>这样就能保证进程1 先于进程2执行 当P(S)&lt;0时，进程会阻塞，直到有进程执行V(S) ,S &#x3D; 1，此时才能执行P操作</p><p>互斥<br>设临界资源信号量mutex &#x3D; 1，（也可以更多）<br>process1()  先p后v<br>    P()</p><p>—-生产者和消费者算法</p><ol><li>规则： 生产者和消费者共享一块初始为空，容量为n的缓冲区，当缓冲区没满时，生产者才能把产品放入缓冲区，当缓冲区不为空时，消费者才能从缓冲区取出产品，缓冲区是临界资源，各进程必须互斥地访问。</li><li>分析： 既有同步也有互斥，同步—？？？，互斥表现为缓冲区为临界资源，必须互斥访问</li><li>设置信号量： empty &#x3D; n &#x2F;&#x2F;同步信号量，表示缓冲区当前空闲容量为n，mutex &#x3D; 1，两个进程互斥。full &#x3D; 0，表示当前缓冲区产品数量</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">producer（）&#123;<br>    <span class="hljs-keyword">while</span>（<span class="hljs-number">1</span>）&#123;<br>        P（empty）<br>        P（mutex）<br>        产品放入缓冲区<br>        V（mutex）<br>        V（full）<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">consumer（）&#123;<br>    <span class="hljs-keyword">while</span>（<span class="hljs-number">1</span>）&#123;<br>        P（full）<br>        P（mutex）<br>        从缓冲区取出产品<br>        V（mutex）<br>        V（empty）<br>        使用产品<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>V操作可以交换位置，P操作不能交换位置，有可能产生死锁，mutex在后面，实现互斥的P操作一定要在实现同步的P操作之前</p><p>———死锁<br>产生死锁的原因： 竞争资源 和 进程推进顺序不当</p><p>死锁产生的一个充分条件：当且仅当 S 状态的资源分配图是不可简化的<br>死锁产生的四个必要条件(同时满足)：1. 互斥条件  2. 不可剥夺条件  3. 请求和保持条件  4. 环路等待条件<br>不能打破互斥条件！！！</p><ol><li>互斥条件：争夺互斥的资源</li><li>不可抢占条件： 进程获取的资源不能被剥夺，只能自己主动放弃</li><li>请求和保持条件： 既请求新的资源（别人占有的），又占有别人想要的资源，请求进程被阻塞，但又对自己保持的资源不放。（想要的你不给，我有的不给你）</li><li>循环等待： 存在一种进程资源的循环等待链接：如哲学家用餐问题，大家都有右手边的筷子，都想要左手边的筷子。形成一个环。（循环等待不一定发生死锁，例如某一个哲学家放下一根筷子。但是死锁必定有循环等待）</li></ol><p>处理死锁的方法： 预防死锁，避免死锁，检测死锁，解除死锁。（死锁发生必须满足四个条件，只要破环其中一个或几个条件，死锁就不会发生）</p><p>预防死锁： 破坏条件</p><ol><li><p>破坏互斥条件： 操作系统使用SPOOLing技术，把互斥的设备改造成共享设备，但是为了系统安全，很多时候无法破坏互斥条件</p></li><li><p>不可抢占条件： 程序占有的资源不可剥夺，那我们就设置规则：<br>方案一： 如果进程申请的资源得不到满足，就必须立即释放保持的所有资源，待以后需要时再重新申请。（即时尚未使用完也要主动释放）<br>方案二： 如果进程需要的资源被其他进程占用，可以由操作系统协助，把想要的资源强行剥夺过来。（需要考虑各进程的优先级，例如 剥夺调度方式）</p></li><li><p>破坏请求和保持条件：进程已经保持了至少一个资源，但是对新资源提出申请，该资源被占用，为了解决这个问题，我们规定在进程运行之前就一次性申请所有它需要的资源，如果在它需要的资源未满足之前，就不投入运行，运行之后这些资源就一直归他占有，这样就不会再请求其他的资源了。</p></li></ol><p>缺点：<br>该策略实现起来简单，但也有明显的缺点:有些资源可能只需要用很短的时间，因此如果进程的整个运行期间都一直保持着所有资源，就会造成严重的资源浪费，资源利用率极低。另外，该策略也有可能导致某些进程饥饿。</p><ol start="4"><li>破坏循环等待条件：<br>对资源采用顺序编号，规定每个进程必须按编号递增的顺序请求资源，同类资源一次性申请完。<br>分析：进程占有小编号的资源，才能申请大编号的资源，大编号的资源不能发过来申请小编号的资源，这样就保证大家申请的资源都是一个方向（从小到大），存在一个编号最大的进程申请的资源必然不可能被占用，因此不会出现所有的进程都出现阻塞的死锁现象</li></ol><p>避免死锁：</p><p>——银行家算法<br>规则： 银行向企业发放贷款，银行的资金有限，有多家企业想申请贷款（每家企业都有最大申请量）。<br>前提：借给企业最大的总数没满足最大申请量时，无论之前借了多少钱都没办法拿回来了，除非你能找到一种借钱方法先满足一部分企业，然后收回一部分资金周转成功，即之后满足所有企业的要求。<br>这种借钱方法我们称为安全序列。类比在操作系统，即操作系统分配系统资源给不同的进程，然后进程结束回收资源再分配。每次申请资源时，系统都预先判断分配之后系统是否是安全状态（会不会产生死锁）</p><p>实际应用：<br>Max：每个进程对资源的最大需求量<br>Allocation ： 每个进程已分配资源量<br>Need： 当前需要资源量<br>Available（Work）： 当前可用资源量</p><p>p0</p><p>虚存<br>——-页面置换算法<br>缺页中断： 缺页的次数<br>页面置换： 页面被换出的次数<br>缺页时未必发生页面置换<br>缺页率： 缺页中断的次数&#x2F;总共访问了多少次的页面</p><p>OPT 最佳适应算法<br>规则： 如果缺页，则把以后都不会用的页面置换出去，其次置换那些最长时间内不会被使用的页面</p><p>FIFO 先进先出置换算法<br>规则： 根据页面调入内存的顺序将页面排成一个队列，每次发生置换时选择队头的页面。（队头！不变的置换选择！不缺页时，访问了页面，不会说更换队列的位置）</p><p>LRU 最近最久未访问<br>规则： 如果页面最近被访问过，那么将来被访问的几率也更高。淘汰最近最久未访问的页面。当发生页面置换时，根据前面的访问序列逆向检查，例如 7  2  1  8 ，后一个为3，此时若发生页面置换，应当从3之前逆向检查，最近最久未访问的页面是 7号页面，因此就把 7号页面置换出去。</p><hr><p>操作系统的概念：<br>基本特性： 并发、共享、异步、虚拟<br>主要功能： 处理机管理 存储器管理 设备管理 文件管理</p><p>中断： CPU进入核心态，由操作系统内核接管工作，拥有或者访问计算机系统更多的资源的状态，也称为特权态，可以运行CPU任何指令<br>用户态：相比核心态来说，拥有或者访问计算机系统的资源较少,也称为非特权态，只能运行CPU非特权指令</p><p>程序程序的顺序执行。<br>特性： 顺序性、封闭性、可再现性。</p><p>程序并发执行<br>特性：间断性、失去封闭性、不可再现性</p><p>进程调度：<br>（1）高级调度(High Level Scheduling)：又称作业调度，调度对象是作业。<br>根据某种算法，决定将外存上处于后备队列中的哪几个作业调入内存，为它们创<br>建进程、分配必要的资源，并将它们放入就绪队列。（3 分）<br>（2）低级调度(Low Level Scheduling)：又称进程调度，调度对象是进程。根<br>据某种算法，决定就绪队列中的哪个进程应获得处理机，并由分派程序将处理机<br>分配给被选中的进程。（4 分）<br>（3）中级调度(Intermediate Scheduling)：又称内存调度。把那些暂时不能运<br>行的进程，调至外存等待。（3 分）</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2023/02/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/02/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="2-进程"><a href="#2-进程" class="headerlink" title="2.进程"></a>2.进程</h1><h2 id="进程的定义："><a href="#进程的定义：" class="headerlink" title="进程的定义："></a>进程的定义：</h2><p>进程映像： </p><h2 id="进程状态的转换"><a href="#进程状态的转换" class="headerlink" title="进程状态的转换"></a>进程状态的转换</h2><h2 id="进程的组织方式"><a href="#进程的组织方式" class="headerlink" title="进程的组织方式"></a>进程的组织方式</h2><ol><li><p>线性方式</p><p>把所有的PCB放置在一张线性表中，每次查找时需要扫描整张表。</p></li><li><p>链接方式</p><p>把所有状态相同的PCB使用链表链接，形成就绪队列、阻塞队列和空白队列等若干队列</p></li><li><p>索引方式</p><p>系统根据进程的不同状态，创建不同状态的索引表，每张表中存储对应状态的PCB地址</p></li></ol><h2 id="进程的控制"><a href="#进程的控制" class="headerlink" title="进程的控制"></a>进程的控制</h2><h3 id="原语"><a href="#原语" class="headerlink" title="原语"></a>原语</h3><p>定义：</p><p>原语的执行具有原子性，即执行过程只能一气呵成，期间不允许被中断。原语使用“关中断指令” 和“开中断指令”这两个特权指令实现原子性</p><p>CPU每执行完一条指令后就检查是否有中断信号，如果有的话就执行关中断，然后不再检查中断信号，直到执行开中断信号。</p><hr><h1 id="3-内存管理"><a href="#3-内存管理" class="headerlink" title="3.内存管理"></a>3.内存管理</h1><p>内存分配算法</p><p>首次适应(FF) ： </p><p>循环首次适应(NF) :</p><p>最佳适应(BF) ：</p><p>最坏适应(WF) :</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 学习历程</title>
    <link href="/2023/02/07/Nginx-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    <url>/2023/02/07/Nginx-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nginx"><a href="#1-nginx" class="headerlink" title="1.nginx"></a>1.nginx</h1><p><em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP?fromModule=lemma_inlink">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488?fromModule=lemma_inlink">反向代理</a>web服务器</p><h1 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2.安装步骤"></a>2.安装步骤</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://nginx.org/download/nginx-<span class="hljs-number">1</span>.<span class="hljs-number">21</span>.<span class="hljs-number">6</span>.tar.gz  <br><br><span class="hljs-attribute">tar</span> -xvzf nginx-<span class="hljs-number">1</span>.<span class="hljs-number">21</span>.<span class="hljs-number">6</span>.tar.gz  <br></code></pre></td></tr></table></figure><h1 id="3-反向代理-负载均衡"><a href="#3-反向代理-负载均衡" class="headerlink" title="3.反向代理 - 负载均衡"></a>3.反向代理 - 负载均衡</h1><p>客户端访问web项目时，http请求走80端口，nginx监听了80端口，对于nginx.conf文件中配置的web服务器权重信息，决定把该请求分发给某个服务器。</p><h1 id="4-动静分离"><a href="#4-动静分离" class="headerlink" title="4.动静分离"></a>4.动静分离</h1><p>一个网页由许多静态资源构成，客户端需要向服务器请求这些资源，这样直接向后端请求会造成很大的无效的并发请求，所以，我们让nginx处理这些静态资源的请求，减少后端服务器的并发量。在nginx的目录下创建 static_resources目录，然后将项目中所以的静态资源拷贝到该目录下，再修改nginx.conf的配置</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq">location ~ .*\.(html|<span class="hljs-type">htm</span>|<span class="hljs-type">gif</span>|<span class="hljs-type">jpg</span>|<span class="hljs-type">jpeg</span>|<span class="hljs-type">bmp</span>|<span class="hljs-type">png</span>|<span class="hljs-type">ico</span>|<span class="hljs-type">txt</span>|<span class="hljs-type">js</span>|<span class="hljs-type">css</span>)&#123;  <br>    root   /soft/nginx/static_resources;  <br>    expires <span class="hljs-number">7</span>d;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My First Blog</title>
    <link href="/2023/02/05/My-First-Blog/"/>
    <url>/2023/02/05/My-First-Blog/</url>
    
    <content type="html"><![CDATA[<p>This will be uploaded into my website :<a href="http://www.codingxiaofu.com/">www.codingxiaofu.com</a> .</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/05/hello-world/"/>
    <url>/2023/02/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
